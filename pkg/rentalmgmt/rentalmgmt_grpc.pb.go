// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/rentalmgmt/rentalmgmt.proto

package rentalmgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Rental_Easy_FunctionalitiesClient is the client API for Rental_Easy_Functionalities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Rental_Easy_FunctionalitiesClient interface {
	CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*UserId, error)
	CreateItem(ctx context.Context, in *NewItem, opts ...grpc.CallOption) (*ItemId, error)
	GetAllItems(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Items, error)
	GetItemById(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*Item, error)
	UpdateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemId, error)
	GetUserLeasedItems(ctx context.Context, in *UserId, opts ...grpc.CallOption) (Rental_Easy_Functionalities_GetUserLeasedItemsClient, error)
	BookItem(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*BookingId, error)
	GetBookedItems(ctx context.Context, in *UserId, opts ...grpc.CallOption) (Rental_Easy_Functionalities_GetBookedItemsClient, error)
	AddReview(ctx context.Context, in *NewReview, opts ...grpc.CallOption) (*ReviewId, error)
	UpdateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*ReviewId, error)
	DeleteReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*ReviewId, error)
	GetAllReviews(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (Rental_Easy_Functionalities_GetAllReviewsClient, error)
}

type rental_Easy_FunctionalitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewRental_Easy_FunctionalitiesClient(cc grpc.ClientConnInterface) Rental_Easy_FunctionalitiesClient {
	return &rental_Easy_FunctionalitiesClient{cc}
}

func (c *rental_Easy_FunctionalitiesClient) CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/rentalmgmt.Rental_Easy_Functionalities/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rental_Easy_FunctionalitiesClient) CreateItem(ctx context.Context, in *NewItem, opts ...grpc.CallOption) (*ItemId, error) {
	out := new(ItemId)
	err := c.cc.Invoke(ctx, "/rentalmgmt.Rental_Easy_Functionalities/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rental_Easy_FunctionalitiesClient) GetAllItems(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := c.cc.Invoke(ctx, "/rentalmgmt.Rental_Easy_Functionalities/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rental_Easy_FunctionalitiesClient) GetItemById(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/rentalmgmt.Rental_Easy_Functionalities/GetItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rental_Easy_FunctionalitiesClient) UpdateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemId, error) {
	out := new(ItemId)
	err := c.cc.Invoke(ctx, "/rentalmgmt.Rental_Easy_Functionalities/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rental_Easy_FunctionalitiesClient) GetUserLeasedItems(ctx context.Context, in *UserId, opts ...grpc.CallOption) (Rental_Easy_Functionalities_GetUserLeasedItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rental_Easy_Functionalities_ServiceDesc.Streams[0], "/rentalmgmt.Rental_Easy_Functionalities/GetUserLeasedItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &rental_Easy_FunctionalitiesGetUserLeasedItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rental_Easy_Functionalities_GetUserLeasedItemsClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type rental_Easy_FunctionalitiesGetUserLeasedItemsClient struct {
	grpc.ClientStream
}

func (x *rental_Easy_FunctionalitiesGetUserLeasedItemsClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rental_Easy_FunctionalitiesClient) BookItem(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*BookingId, error) {
	out := new(BookingId)
	err := c.cc.Invoke(ctx, "/rentalmgmt.Rental_Easy_Functionalities/BookItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rental_Easy_FunctionalitiesClient) GetBookedItems(ctx context.Context, in *UserId, opts ...grpc.CallOption) (Rental_Easy_Functionalities_GetBookedItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rental_Easy_Functionalities_ServiceDesc.Streams[1], "/rentalmgmt.Rental_Easy_Functionalities/GetBookedItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &rental_Easy_FunctionalitiesGetBookedItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rental_Easy_Functionalities_GetBookedItemsClient interface {
	Recv() (*BookedItems, error)
	grpc.ClientStream
}

type rental_Easy_FunctionalitiesGetBookedItemsClient struct {
	grpc.ClientStream
}

func (x *rental_Easy_FunctionalitiesGetBookedItemsClient) Recv() (*BookedItems, error) {
	m := new(BookedItems)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rental_Easy_FunctionalitiesClient) AddReview(ctx context.Context, in *NewReview, opts ...grpc.CallOption) (*ReviewId, error) {
	out := new(ReviewId)
	err := c.cc.Invoke(ctx, "/rentalmgmt.Rental_Easy_Functionalities/AddReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rental_Easy_FunctionalitiesClient) UpdateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*ReviewId, error) {
	out := new(ReviewId)
	err := c.cc.Invoke(ctx, "/rentalmgmt.Rental_Easy_Functionalities/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rental_Easy_FunctionalitiesClient) DeleteReview(ctx context.Context, in *ReviewId, opts ...grpc.CallOption) (*ReviewId, error) {
	out := new(ReviewId)
	err := c.cc.Invoke(ctx, "/rentalmgmt.Rental_Easy_Functionalities/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rental_Easy_FunctionalitiesClient) GetAllReviews(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (Rental_Easy_Functionalities_GetAllReviewsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rental_Easy_Functionalities_ServiceDesc.Streams[2], "/rentalmgmt.Rental_Easy_Functionalities/GetAllReviews", opts...)
	if err != nil {
		return nil, err
	}
	x := &rental_Easy_FunctionalitiesGetAllReviewsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rental_Easy_Functionalities_GetAllReviewsClient interface {
	Recv() (*Review, error)
	grpc.ClientStream
}

type rental_Easy_FunctionalitiesGetAllReviewsClient struct {
	grpc.ClientStream
}

func (x *rental_Easy_FunctionalitiesGetAllReviewsClient) Recv() (*Review, error) {
	m := new(Review)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Rental_Easy_FunctionalitiesServer is the server API for Rental_Easy_Functionalities service.
// All implementations must embed UnimplementedRental_Easy_FunctionalitiesServer
// for forward compatibility
type Rental_Easy_FunctionalitiesServer interface {
	CreateUser(context.Context, *NewUser) (*UserId, error)
	CreateItem(context.Context, *NewItem) (*ItemId, error)
	GetAllItems(context.Context, *Request) (*Items, error)
	GetItemById(context.Context, *ItemId) (*Item, error)
	UpdateItem(context.Context, *Item) (*ItemId, error)
	GetUserLeasedItems(*UserId, Rental_Easy_Functionalities_GetUserLeasedItemsServer) error
	BookItem(context.Context, *Booking) (*BookingId, error)
	GetBookedItems(*UserId, Rental_Easy_Functionalities_GetBookedItemsServer) error
	AddReview(context.Context, *NewReview) (*ReviewId, error)
	UpdateReview(context.Context, *Review) (*ReviewId, error)
	DeleteReview(context.Context, *ReviewId) (*ReviewId, error)
	GetAllReviews(*ItemId, Rental_Easy_Functionalities_GetAllReviewsServer) error
	mustEmbedUnimplementedRental_Easy_FunctionalitiesServer()
}

// UnimplementedRental_Easy_FunctionalitiesServer must be embedded to have forward compatible implementations.
type UnimplementedRental_Easy_FunctionalitiesServer struct {
}

func (UnimplementedRental_Easy_FunctionalitiesServer) CreateUser(context.Context, *NewUser) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) CreateItem(context.Context, *NewItem) (*ItemId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) GetAllItems(context.Context, *Request) (*Items, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) GetItemById(context.Context, *ItemId) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemById not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) UpdateItem(context.Context, *Item) (*ItemId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) GetUserLeasedItems(*UserId, Rental_Easy_Functionalities_GetUserLeasedItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserLeasedItems not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) BookItem(context.Context, *Booking) (*BookingId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookItem not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) GetBookedItems(*UserId, Rental_Easy_Functionalities_GetBookedItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBookedItems not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) AddReview(context.Context, *NewReview) (*ReviewId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReview not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) UpdateReview(context.Context, *Review) (*ReviewId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) DeleteReview(context.Context, *ReviewId) (*ReviewId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) GetAllReviews(*ItemId, Rental_Easy_Functionalities_GetAllReviewsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllReviews not implemented")
}
func (UnimplementedRental_Easy_FunctionalitiesServer) mustEmbedUnimplementedRental_Easy_FunctionalitiesServer() {
}

// UnsafeRental_Easy_FunctionalitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Rental_Easy_FunctionalitiesServer will
// result in compilation errors.
type UnsafeRental_Easy_FunctionalitiesServer interface {
	mustEmbedUnimplementedRental_Easy_FunctionalitiesServer()
}

func RegisterRental_Easy_FunctionalitiesServer(s grpc.ServiceRegistrar, srv Rental_Easy_FunctionalitiesServer) {
	s.RegisterService(&Rental_Easy_Functionalities_ServiceDesc, srv)
}

func _Rental_Easy_Functionalities_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rental_Easy_FunctionalitiesServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentalmgmt.Rental_Easy_Functionalities/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rental_Easy_FunctionalitiesServer).CreateUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rental_Easy_Functionalities_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rental_Easy_FunctionalitiesServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentalmgmt.Rental_Easy_Functionalities/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rental_Easy_FunctionalitiesServer).CreateItem(ctx, req.(*NewItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rental_Easy_Functionalities_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rental_Easy_FunctionalitiesServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentalmgmt.Rental_Easy_Functionalities/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rental_Easy_FunctionalitiesServer).GetAllItems(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rental_Easy_Functionalities_GetItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rental_Easy_FunctionalitiesServer).GetItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentalmgmt.Rental_Easy_Functionalities/GetItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rental_Easy_FunctionalitiesServer).GetItemById(ctx, req.(*ItemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rental_Easy_Functionalities_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rental_Easy_FunctionalitiesServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentalmgmt.Rental_Easy_Functionalities/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rental_Easy_FunctionalitiesServer).UpdateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rental_Easy_Functionalities_GetUserLeasedItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Rental_Easy_FunctionalitiesServer).GetUserLeasedItems(m, &rental_Easy_FunctionalitiesGetUserLeasedItemsServer{stream})
}

type Rental_Easy_Functionalities_GetUserLeasedItemsServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type rental_Easy_FunctionalitiesGetUserLeasedItemsServer struct {
	grpc.ServerStream
}

func (x *rental_Easy_FunctionalitiesGetUserLeasedItemsServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _Rental_Easy_Functionalities_BookItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rental_Easy_FunctionalitiesServer).BookItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentalmgmt.Rental_Easy_Functionalities/BookItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rental_Easy_FunctionalitiesServer).BookItem(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rental_Easy_Functionalities_GetBookedItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Rental_Easy_FunctionalitiesServer).GetBookedItems(m, &rental_Easy_FunctionalitiesGetBookedItemsServer{stream})
}

type Rental_Easy_Functionalities_GetBookedItemsServer interface {
	Send(*BookedItems) error
	grpc.ServerStream
}

type rental_Easy_FunctionalitiesGetBookedItemsServer struct {
	grpc.ServerStream
}

func (x *rental_Easy_FunctionalitiesGetBookedItemsServer) Send(m *BookedItems) error {
	return x.ServerStream.SendMsg(m)
}

func _Rental_Easy_Functionalities_AddReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewReview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rental_Easy_FunctionalitiesServer).AddReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentalmgmt.Rental_Easy_Functionalities/AddReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rental_Easy_FunctionalitiesServer).AddReview(ctx, req.(*NewReview))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rental_Easy_Functionalities_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Review)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rental_Easy_FunctionalitiesServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentalmgmt.Rental_Easy_Functionalities/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rental_Easy_FunctionalitiesServer).UpdateReview(ctx, req.(*Review))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rental_Easy_Functionalities_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rental_Easy_FunctionalitiesServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentalmgmt.Rental_Easy_Functionalities/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rental_Easy_FunctionalitiesServer).DeleteReview(ctx, req.(*ReviewId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rental_Easy_Functionalities_GetAllReviews_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ItemId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Rental_Easy_FunctionalitiesServer).GetAllReviews(m, &rental_Easy_FunctionalitiesGetAllReviewsServer{stream})
}

type Rental_Easy_Functionalities_GetAllReviewsServer interface {
	Send(*Review) error
	grpc.ServerStream
}

type rental_Easy_FunctionalitiesGetAllReviewsServer struct {
	grpc.ServerStream
}

func (x *rental_Easy_FunctionalitiesGetAllReviewsServer) Send(m *Review) error {
	return x.ServerStream.SendMsg(m)
}

// Rental_Easy_Functionalities_ServiceDesc is the grpc.ServiceDesc for Rental_Easy_Functionalities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rental_Easy_Functionalities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rentalmgmt.Rental_Easy_Functionalities",
	HandlerType: (*Rental_Easy_FunctionalitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Rental_Easy_Functionalities_CreateUser_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _Rental_Easy_Functionalities_CreateItem_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _Rental_Easy_Functionalities_GetAllItems_Handler,
		},
		{
			MethodName: "GetItemById",
			Handler:    _Rental_Easy_Functionalities_GetItemById_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _Rental_Easy_Functionalities_UpdateItem_Handler,
		},
		{
			MethodName: "BookItem",
			Handler:    _Rental_Easy_Functionalities_BookItem_Handler,
		},
		{
			MethodName: "AddReview",
			Handler:    _Rental_Easy_Functionalities_AddReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _Rental_Easy_Functionalities_UpdateReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _Rental_Easy_Functionalities_DeleteReview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserLeasedItems",
			Handler:       _Rental_Easy_Functionalities_GetUserLeasedItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBookedItems",
			Handler:       _Rental_Easy_Functionalities_GetBookedItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllReviews",
			Handler:       _Rental_Easy_Functionalities_GetAllReviews_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/rentalmgmt/rentalmgmt.proto",
}

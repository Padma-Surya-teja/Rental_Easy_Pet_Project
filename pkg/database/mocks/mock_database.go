// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "rental_easy.in/m/pkg/models"
)

// MockDataBase is a mock of DataBase interface.
type MockDataBase struct {
	ctrl     *gomock.Controller
	recorder *MockDataBaseMockRecorder
}

// MockDataBaseMockRecorder is the mock recorder for MockDataBase.
type MockDataBaseMockRecorder struct {
	mock *MockDataBase
}

// NewMockDataBase creates a new mock instance.
func NewMockDataBase(ctrl *gomock.Controller) *MockDataBase {
	mock := &MockDataBase{ctrl: ctrl}
	mock.recorder = &MockDataBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataBase) EXPECT() *MockDataBaseMockRecorder {
	return m.recorder
}

// AddBooking mocks base method.
func (m *MockDataBase) AddBooking(arg0 models.Booking) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBooking", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddBooking indicates an expected call of AddBooking.
func (mr *MockDataBaseMockRecorder) AddBooking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBooking", reflect.TypeOf((*MockDataBase)(nil).AddBooking), arg0)
}

// AddItem mocks base method.
func (m *MockDataBase) AddItem(arg0 models.Item) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockDataBaseMockRecorder) AddItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockDataBase)(nil).AddItem), arg0)
}

// AddReview mocks base method.
func (m *MockDataBase) AddReview(arg0 models.Review) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// AddReview indicates an expected call of AddReview.
func (mr *MockDataBaseMockRecorder) AddReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockDataBase)(nil).AddReview), arg0)
}

// CreateUser mocks base method.
func (m *MockDataBase) CreateUser(arg0 models.User) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDataBaseMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDataBase)(nil).CreateUser), arg0)
}

// DeleteItem mocks base method.
func (m *MockDataBase) DeleteItem(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockDataBaseMockRecorder) DeleteItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockDataBase)(nil).DeleteItem), arg0)
}

// DeleteReview mocks base method.
func (m *MockDataBase) DeleteReview(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockDataBaseMockRecorder) DeleteReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockDataBase)(nil).DeleteReview), arg0)
}

// GetBookings mocks base method.
func (m *MockDataBase) GetBookings(arg0 int) []models.Booking {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookings", arg0)
	ret0, _ := ret[0].([]models.Booking)
	return ret0
}

// GetBookings indicates an expected call of GetBookings.
func (mr *MockDataBaseMockRecorder) GetBookings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookings", reflect.TypeOf((*MockDataBase)(nil).GetBookings), arg0)
}

// GetItemById mocks base method.
func (m *MockDataBase) GetItemById(arg0 int) models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", arg0)
	ret0, _ := ret[0].(models.Item)
	return ret0
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockDataBaseMockRecorder) GetItemById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockDataBase)(nil).GetItemById), arg0)
}

// GetItems mocks base method.
func (m *MockDataBase) GetItems() []models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]models.Item)
	return ret0
}

// GetItems indicates an expected call of GetItems.
func (mr *MockDataBaseMockRecorder) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockDataBase)(nil).GetItems))
}

// GetItemsofOwner mocks base method.
func (m *MockDataBase) GetItemsofOwner(arg0 int) []models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsofOwner", arg0)
	ret0, _ := ret[0].([]models.Item)
	return ret0
}

// GetItemsofOwner indicates an expected call of GetItemsofOwner.
func (mr *MockDataBaseMockRecorder) GetItemsofOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsofOwner", reflect.TypeOf((*MockDataBase)(nil).GetItemsofOwner), arg0)
}

// GetReviews mocks base method.
func (m *MockDataBase) GetReviews(arg0 int) []models.Review {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviews", arg0)
	ret0, _ := ret[0].([]models.Review)
	return ret0
}

// GetReviews indicates an expected call of GetReviews.
func (mr *MockDataBaseMockRecorder) GetReviews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviews", reflect.TypeOf((*MockDataBase)(nil).GetReviews), arg0)
}

// GetUserEmail mocks base method.
func (m *MockDataBase) GetUserEmail(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockDataBaseMockRecorder) GetUserEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockDataBase)(nil).GetUserEmail), arg0)
}

// Get_Item_Name mocks base method.
func (m *MockDataBase) Get_Item_Name(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get_Item_Name", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get_Item_Name indicates an expected call of Get_Item_Name.
func (mr *MockDataBaseMockRecorder) Get_Item_Name(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get_Item_Name", reflect.TypeOf((*MockDataBase)(nil).Get_Item_Name), arg0)
}

// SearchByCategory mocks base method.
func (m *MockDataBase) SearchByCategory(arg0 string) []models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByCategory", arg0)
	ret0, _ := ret[0].([]models.Item)
	return ret0
}

// SearchByCategory indicates an expected call of SearchByCategory.
func (mr *MockDataBaseMockRecorder) SearchByCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByCategory", reflect.TypeOf((*MockDataBase)(nil).SearchByCategory), arg0)
}

// SearchItems mocks base method.
func (m *MockDataBase) SearchItems(arg0 string) []models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchItems", arg0)
	ret0, _ := ret[0].([]models.Item)
	return ret0
}

// SearchItems indicates an expected call of SearchItems.
func (mr *MockDataBaseMockRecorder) SearchItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchItems", reflect.TypeOf((*MockDataBase)(nil).SearchItems), arg0)
}

// Update_Item mocks base method.
func (m *MockDataBase) Update_Item(item models.Item) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_Item", item)
	ret0, _ := ret[0].(int)
	return ret0
}

// Update_Item indicates an expected call of Update_Item.
func (mr *MockDataBaseMockRecorder) Update_Item(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_Item", reflect.TypeOf((*MockDataBase)(nil).Update_Item), item)
}

// Update_Review mocks base method.
func (m *MockDataBase) Update_Review(arg0 models.Review) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_Review", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Update_Review indicates an expected call of Update_Review.
func (mr *MockDataBaseMockRecorder) Update_Review(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_Review", reflect.TypeOf((*MockDataBase)(nil).Update_Review), arg0)
}

// UserAlreadyAddedReview mocks base method.
func (m *MockDataBase) UserAlreadyAddedReview(arg0, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAlreadyAddedReview", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserAlreadyAddedReview indicates an expected call of UserAlreadyAddedReview.
func (mr *MockDataBaseMockRecorder) UserAlreadyAddedReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAlreadyAddedReview", reflect.TypeOf((*MockDataBase)(nil).UserAlreadyAddedReview), arg0, arg1)
}

// UserAlreadyBooked mocks base method.
func (m *MockDataBase) UserAlreadyBooked(arg0, arg1 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAlreadyBooked", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserAlreadyBooked indicates an expected call of UserAlreadyBooked.
func (mr *MockDataBaseMockRecorder) UserAlreadyBooked(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAlreadyBooked", reflect.TypeOf((*MockDataBase)(nil).UserAlreadyBooked), arg0, arg1)
}
